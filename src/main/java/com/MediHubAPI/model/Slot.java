package com.MediHubAPI.model;


import com.MediHubAPI.model.enums.SlotStatus;
import com.MediHubAPI.model.enums.SlotType;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.time.LocalTime;

@Entity
@Table(name = "slots")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Slot {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Doctor this slot belongs to
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "doctor_id", nullable = false)
    private User doctor;

    /**
     * Date of the slot (e.g., 2025-07-19)
     */
    @Column(name = "date", nullable = false)
    private LocalDate date;

    /**
     * Start time of the slot (e.g., 10:00)
     */
    @Column(name = "start_time", nullable = false)
    private LocalTime startTime;

    /**
     * End time of the slot (e.g., 10:30)
     */
    @Column(name = "end_time", nullable = false)
    private LocalTime endTime;

    /**
     * Slot status (AVAILABLE, BOOKED, BLOCKED, etc.)
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private SlotStatus status;

    /**
     * Slot type (REGULAR, WALKIN, EMERGENCY, etc.)
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private SlotType type;

    /**
     * If the slot was auto-generated by recurrence template
     */
    @Column(name = "is_recurring", nullable = false)
    private boolean recurring;

    /**
     * Audit fields
     */
    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "notes")
    private String notes;

    // Add other metadata fields as needed (room, video link, etc.)

    @OneToOne(mappedBy = "slot", cascade = CascadeType.ALL, orphanRemoval = true)
    private Appointment appointment;
}